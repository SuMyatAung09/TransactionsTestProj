@page "/TransactionInfo"
@using System.IO;
@using CsvHelper;
@using System.Globalization;
@using TransactionWeb.Repos;
@using TransactionWeb.Entities;
@using Microsoft.EntityFrameworkCore;
@using TransactionWeb.Models;
@using TransactionWeb.Services;
@using Microsoft.AspNetCore.Http;
@using System.Collections.Generic;
@using System.Text.RegularExpressions;
@inject NavigationManager uriHelper;
@using System.Threading;
@using TransactionWeb;
@using Microsoft.AspNetCore.Components;
@using Microsoft.AspNetCore.Components.Web;
@using Syncfusion.Blazor;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Popups;
@using MatBlazor;
@using System.Xml;

@code {

    [Inject]
    DBContext Context { get; set; }
    [CascadingParameter]
    public MainLayout Top { get; set; }
    protected string Category { get; set; }
    private SfUploader sfUploader;
    public List<UploadFiles>
        UploadFiles
    { get; set; }
    public int StatusCode { get; set; } = StatusCodes.Status400BadRequest;
    private SfDialog SfDialog;
    private bool IsEnabled { get; set; } = true;
    private bool IsVisible { get; set; } = false;
    private bool IsDisableUploadbtn { get; set; } = true;
    public class file
    {
        public string Id { get; set; }
        public string Amount { get; set; }
        public string PaymentCurrencyCode { get; set; }
        public string TransactionDate { get; set; }
        public string Status { get; set; }
    }

    private const string tempDirectory = "wwwroot/transactionUploadFile";
    public string selectedText { get; set; }
    public string csvFileName { get; set; }
    protected override void OnInitialized()
    {
        this.IsDisableUploadbtn = true;
    }


    private async Task OnImportAsync(UploadChangeEventArgs args)
    {
        await Task.Delay(0);
        try
        {
            var file = args.Files.LastOrDefault();
            if (Directory.Exists(tempDirectory))
            {
                Directory.Delete(tempDirectory, true);
                Directory.CreateDirectory(tempDirectory);
            }
            else
            {
                Directory.CreateDirectory(tempDirectory);
            }
            string questionnairePath = $"{tempDirectory}/{file.FileInfo.Name}";
            var path = file.FileInfo.Name;
            var fileExtension = Path.GetExtension(path);
            if (fileExtension == ".csv")
            {
                Top.Toast.Processing("Browse in process, please wait...");
                this.StateHasChanged();
                using var filestream = new FileStream(questionnairePath, FileMode.Create, FileAccess.Write);
                file.Stream.WriteTo(filestream);
                filestream.Close();
                file.Stream.Close();
                selectedText = "Selected File:";
                csvFileName = file.FileInfo.Name;
                Top.Toast.Success("Process complete!");
                this.IsDisableUploadbtn = false;
                this.StateHasChanged();
            }
            else if (fileExtension == ".xml")
            {
                List<Transactions> transactionslist = new List<Transactions>();
                XmlDocument doc = new XmlDocument();
                doc.Load(string.Concat(questionnairePath));

                //Loop through the selected Nodes.
                foreach (XmlNode node in doc.SelectNodes("/Transactions/Transaction"))
                {
                    //Fetch the Node values and assign it to Model.
                    transactionslist.Add(new Transactions
                    {
                        Id = node["Id"].InnerText,
                        Amount = Convert.ToDecimal(node["Amount"].InnerText),
                        PaymentCurrencyCode = node["CurrencyCode"].InnerText,
                        TransactionDate = Convert.ToDateTime(node["TransactionDate"].InnerText),
                        Status = node["Status"].InnerText
                    });
                }
                foreach (var record in transactionslist)
                {
                    var entity = new Transactions();
                    entity.Id = record.Id;
                    entity.Amount = Convert.ToDecimal(record.Amount);
                    entity.PaymentCurrencyCode = record.PaymentCurrencyCode;
                    entity.Status = record.Status;
                    entity.TransactionDate = DateTime.UtcNow;
                    Context.Transactions.Add(entity);
                    await Context.SaveChangesAsync();

                }
                Context.SaveChanges();
            }
            else
            {
                selectedText = "Selected File:";
                csvFileName = file.FileInfo.Name;
                Directory.Delete(tempDirectory, true);
                this.StateHasChanged();
                this.IsEnabled = true;
                this.IsDisableUploadbtn = true;
                this.StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Top.Toast.Error(ex.Message, Category);
        }
    }

    private void OpenDialog()
    {
        this.IsVisible = true;
    }

    private void CloseDialog()
    {
        this.IsVisible = false;
    }

    private async Task OnUploadAsync()
    {
        await this.SfDialog.Hide();
        this.IsDisableUploadbtn = true;
        this.StateHasChanged();
        Top.Toast.Processing("Upload in process, please wait...");
        await UploadAsync();
        this.IsEnabled = true;
        this.StateHasChanged();
    }

    public async Task<RepoResult> UploadAsync()
    {
        var result = new RepoResult();
        string[] files = Directory.GetFiles(tempDirectory);

        try
        {
            foreach (string importFile in files)
            {
                var rootInfo = new DirectoryInfo(importFile);
                var fileExtension = Path.GetExtension(importFile);
                var fileName = rootInfo.Name;
                var filePath = $"{tempDirectory}/{fileName}";

                if (fileExtension == ".csv")
                {
                    using (var reader = new StreamReader(filePath))
                    using (var csv = new CsvReader(reader, CultureInfo.InvariantCulture))
                    {
                        var records = csv.GetRecords<file>();
                        if (records != null)
                        {
                            foreach (var record in records)
                            {
                                var entity = new Transactions();
                                entity.Id = record.Id;
                                entity.Amount = Convert.ToDecimal(record.Amount);
                                entity.PaymentCurrencyCode = record.PaymentCurrencyCode;
                                entity.Status = record.Status;
                                entity.TransactionDate = DateTime.UtcNow;
                                Context.Transactions.Add(entity);
                                await Context.SaveChangesAsync();
                            }
                            Context.SaveChanges();
                        }
                        else
                        {
                            result.StatusCode = StatusCodes.Status403Forbidden;
                            result.Message = "Items can't be null.";
                        }

                    }

                    File.Delete(importFile);
                }
                else
                {
                    result.Message = "Only .csv file is allowed to upload.";
                    result.StatusCode = StatusCodes.Status403Forbidden;

                }
            }
        }

        catch (Exception e)
        {
            result.Message = e.Message;
            result.StatusCode = StatusCodes.Status500InternalServerError;
        }
        return result;
    }

}


<div class="row">
    <SfUploader @ref="sfUploader" ID="UploadFiles" AutoUpload="true" ShowFileList="false" Multiple="false" AllowedExtensions=".csv" Enabled="@IsEnabled">
        <UploaderEvents ValueChange="OnImportAsync"></UploaderEvents>
    </SfUploader>
</div>
<div class="row">
    <span STYLE="font-size:10px"><b>@selectedText</b> @csvFileName</span><br /><br />
</div>
<div class="row">
    <MatButton Id="btnUpload" Icon="upload"
               OnClick="OpenDialog"
               Class="text-light mdc-button mdc-button--raised mdc-button--leading" Disabled="@IsDisableUploadbtn">Upload</MatButton>

</div>

<SfDialog @ref="SfDialog" ID="dialog" ShowCloseIcon="false" IsModal="true" @bind-Visible="@IsVisible">
    <DialogTemplates>
        <Header> <div id="dialog-7377141d-ff13-4498-af23-33056e07ed21_title" class="e-dlg-header">Confirm Upload</div></Header>
        <Content>
            <div id="dialog-7377141d-ff13-4498-af23-33056e07ed21_dialog-content" class="e-dlg-content">
                <div class="row">
                    <div class="col-3 pr-0 text-right">
                        <img src="images/icon/warning.png" width="65">
                    </div>
                    <div class="col-9 my-auto">
                        <div class="mb-2">Are you sure to Upload the csv file data?</div>
                        <b></b>
                    </div>
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        <DialogButton Content="Proceed" IsPrimary="true" OnClick="@OnUploadAsync" />
        <DialogButton Content="Cancel" IsPrimary="false" OnClick="@CloseDialog" />
    </DialogButtons>
</SfDialog>

<style>

    #template {
        display: inline-block;
        padding: 0px 10px;
        vertical-align: middle;
        height: 40px;
        line-height: 40px;
        background-color: powderblue;
    }

    #dialog {
        z-index: 1001;
        width: 330px;
        height: 230px;
        left: 0px;
        top: 0px;
        position: relative;
    }
</style>

<link rel="stylesheet" href="css/site.css" />
<link rel="stylesheet" href="css/sidebar.css" />
<link rel="stylesheet" href="css/component.css" />
